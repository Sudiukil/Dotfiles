// Place your key bindings in this file to override the defaults
[
  // Ctrl+Q closes window
  {
    "key": "ctrl+q",
    "command": "-workbench.action.quickOpenNavigateNextInViewPicker",
    "when": "inQuickOpen && inViewsPicker"
  },
  {
    "key": "ctrl+q",
    "command": "-workbench.action.quickOpenView"
  },
  {
    "key": "ctrl+shift+w",
    "command": "-workbench.action.closeWindow"
  },
  {
    "key": "ctrl+q",
    "command": "workbench.action.closeWindow"
  },
  // Shift+F5 restarts debugging
  {
    "key": "shift+f5",
    "command": "-workbench.action.debug.disconnect",
    "when": "focusedSessionIsAttach && inDebugMode"
  },
  {
    "key": "shift+f5",
    "command": "-workbench.action.debug.stop",
    "when": "inDebugMode && !focusedSessionIsAttach"
  },
  {
    "key": "shift+f5",
    "command": "workbench.action.debug.restart",
    "when": "inDebugMode"
  },
  {
    "key": "ctrl+shift+f5",
    "command": "-workbench.action.debug.restart",
    "when": "inDebugMode"
  },
  // Ctrl+F5 stops debugging
  {
    "key": "ctrl+f5",
    "command": "-workbench.action.debug.run",
    "when": "debuggersAvailable && debugState != 'initializing'"
  },
  {
    "key": "ctrl+f5",
    "command": "-debug.openView",
    "when": "!debuggersAvailable"
  },
  {
    "key": "ctrl+f5",
    "command": "workbench.action.debug.stop"
  },
  // Alt+F5 disconnects debugger
  {
    "key": "alt+f5",
    "command": "-workbench.action.editor.nextChange",
    "when": "editorTextFocus && !textCompareEditorActive && quickDiffDecorationCount != '0'"
  },
  {
    "key": "alt+f5",
    "command": "-workbench.action.compareEditor.nextChange",
    "when": "textCompareEditorVisible"
  },
  {
    "key": "alt+f5",
    "command": "-chatEditor.action.navigateNext",
    "when": "chatEdits.hasEditorModifications && chatIsEnabled && editorFocus || chatEdits.hasEditorModifications && chatIsEnabled && notebookCellListFocused"
  },
  {
    "key": "alt+f5",
    "command": "workbench.action.debug.disconnect"
  },
  // Ctrl+Alt+R reloads window
  {
    "key": "ctrl+alt+r",
    "command": "-workbench.action.terminal.runRecentCommand",
    "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
  },
  {
    "key": "ctrl+alt+r",
    "command": "-workbench.action.terminal.sendSequence",
    "when": "accessibilityModeEnabled && terminalFocus"
  },
  {
    "key": "ctrl+alt+r",
    "command": "workbench.action.reloadWindow"
  },
  {
    "key": "ctrl+r",
    "command": "-workbench.action.reloadWindow",
    "when": "isDevelopment"
  },
  // Ctrl+Shift+D duplicates selection
  {
    "key": "ctrl+shift+d",
    "command": "-mssql.disconnect",
    "when": "editorTextFocus && editorLangId == 'sql'"
  },
  {
    "key": "ctrl+shift+d",
    "command": "-workbench.view.debug",
    "when": "viewContainer.workbench.view.debug.enabled"
  },
  {
    "key": "ctrl+shift+d",
    "command": "editor.action.duplicateSelection"
  },
  // Ctrl+G chords are git actions
  {
    "key": "ctrl+g b",
    "command": "git.checkout"
  },
  {
    "key": "ctrl+g c",
    "command": "git.commitStaged"
  },
  {
    "key": "ctrl+g f",
    "command": "git.fetchPrune"
  },
  {
    "key": "ctrl+g m",
    "command": "git.merge"
  },
  {
    "key": "ctrl+g o",
    "command": "git.openAllChanges"
  },
  {
    "key": "ctrl+g p",
    "command": "git.pull"
  },
  {
    "key": "ctrl+g shift+p",
    "command": "git.pushWithTags"
  },
  {
    "key": "ctrl+g s",
    "command": "git.stage"
  },
  // F8 goes to next problem
  {
    "key": "f8",
    "command": "-editor.action.marker.nextInFiles",
    "when": "editorFocus"
  },
  {
    "key": "f8",
    "command": "-PowerShell.RunSelection",
    "when": "editorTextFocus && editorLangId == 'powershell'"
  },
  {
    "key": "f8",
    "command": "editor.action.marker.next",
    "when": "editorFocus"
  },
  {
    "key": "alt+f8",
    "command": "-editor.action.marker.next",
    "when": "editorFocus"
  },
  // Shift+F8 goes to previous problem
  {
    "key": "shift+f8",
    "command": "-editor.action.marker.prevInFiles",
    "when": "editorFocus"
  },
  {
    "key": "shift+f8",
    "command": "editor.action.marker.prev",
    "when": "editorFocus"
  },
  {
    "key": "shift+alt+f8",
    "command": "-editor.action.marker.prev",
    "when": "editorFocus"
  },
  // Ctrl+E executes current SQL statement
  {
    "key": "ctrl+e",
    "command": "-workbench.action.quickOpen"
  },
  {
    "key": "ctrl+e",
    "command": "-editor.action.toggleScreenReaderAccessibilityMode",
    "when": "accessibilityHelpIsShown"
  },
  {
    "key": "ctrl+e",
    "command": "-workbench.action.quickOpenNavigateNextInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "key": "ctrl+e",
    "command": "mssql.runCurrentStatement",
    "when": "editorTextFocus && editorLangId == 'sql'"
  },
  // Ctrl+Shift+, opens keybindings settings
  {
    "key": "ctrl+shift+oem_comma",
    "command": "-editor.action.inPlaceReplace.up",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+oem_comma",
    "command": "-workbench.action.terminal.configureSuggestSettings",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "key": "ctrl+shift+oem_comma",
    "command": "workbench.action.openGlobalKeybindings"
  },
  {
    "key": "ctrl+k ctrl+s",
    "command": "-workbench.action.openGlobalKeybindings"
  },
  // Ctrl+Alt+P opens Project Manager's list of projects
  {
    "key": "shift+alt+p",
    "command": "-projectManager.listProjects"
  },
  {
    "key": "ctrl+alt+p",
    "command": "projectManager.listProjectsNewWindow"
  },
  // Ctrl+T chords are tasks actions
  {
    "key": "ctrl+t r",
    "command": "workbench.action.tasks.runTask"
  },
  {
    "key": "ctrl+t b",
    "command": "workbench.action.tasks.build",
    "when": "taskCommandsRegistered"
  },
  {
    "key": "ctrl+shift+b",
    "command": "-workbench.action.tasks.build",
    "when": "taskCommandsRegistered"
  },
  {
    "key": "ctrl+t t",
    "command": "workbench.action.tasks.test"
  },
  {
    "key": "ctrl+t shift+r",
    "command": "workbench.action.tasks.restartTask"
  },
  {
    "key": "ctrl+t k",
    "command": "workbench.action.tasks.terminate"
  },
  // Ctrl+Shift+Ã¹ switches active terminal
  {
    "key": "ctrl+shift+oem_3",
    "command": "-workbench.action.terminal.new",
    "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
  },
  {
    "key": "ctrl+shift+oem_3",
    "command": "workbench.action.quickOpenTerm"
  },
  // Ctrl+Shift+W closes all tabs/editors
  {
    "key": "ctrl+shift+w",
    "command": "workbench.action.closeAllEditors"
  },
  {
    "key": "ctrl+k ctrl+w",
    "command": "-workbench.action.closeAllEditors"
  },
  // Ctrl+Tab opens next tab (simple non-MRU tab switching)
  {
    "key": "ctrl+tab",
    "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
    "when": "!activeEditorGroupEmpty"
  },
  {
    "key": "ctrl+tab",
    "command": "-workbench.action.quickOpenNavigateNextInEditorPicker",
    "when": "inEditorsPicker && inQuickOpen"
  },
  {
    "key": "ctrl+tab",
    "command": "workbench.action.nextEditor"
  },
  {
    "key": "ctrl+pagedown",
    "command": "-workbench.action.nextEditor"
  },
  // Ctrl+Shift+Tab opens previous tab (simple non-MRU tab switching)
  {
    "key": "ctrl+shift+tab",
    "command": "-workbench.action.quickOpenLeastRecentlyUsedEditorInGroup",
    "when": "!activeEditorGroupEmpty"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "-workbench.action.quickOpenNavigatePreviousInEditorPicker",
    "when": "inEditorsPicker && inQuickOpen"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.previousEditor"
  },
  {
    "key": "ctrl+pageup",
    "command": "-workbench.action.previousEditor"
  },
  // Ctrl+Shift+* splits editor horizontaly
  {
    "key": "ctrl+shift+oem_5",
    "command": "-editor.action.jumpToBracket",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+oem_5",
    "command": "-workbench.action.terminal.focusTabs",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
  },
  {
    "key": "ctrl+shift+oem_5",
    "command": "workbench.action.splitEditorOrthogonal"
  },
  {
    "key": "ctrl+k ctrl+oem_5",
    "command": "-workbench.action.splitEditorOrthogonal"
  },
  // F6 toggles debug console
  {
    "key": "f6",
    "command": "-workbench.action.debug.pause",
    "when": "debugState == 'running'"
  },
  {
    "key": "f6",
    "command": "-workbench.action.focusNextPart"
  },
  {
    "key": "f6",
    "command": "workbench.debug.action.toggleRepl",
    "when": "workbench.panel.repl.view.active"
  },
  {
    "key": "ctrl+shift+y",
    "command": "-workbench.debug.action.toggleRepl",
    "when": "workbench.panel.repl.view.active"
  },
  // Ctrl+^ maximizes terminal panel
  {
    "key": "ctrl+oem_6",
    "command": "-editor.action.indentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+oem_6",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  // Ctrl+$ maximizes group panel size
  {
    "key": "ctrl+oem_1 ctrl+a",
    "command": "-testing.debugAll"
  },
  {
    "key": "ctrl+oem_1 ctrl+e",
    "command": "-testing.debugFailTests"
  },
  {
    "key": "ctrl+oem_1 ctrl+l",
    "command": "-testing.debugLastRun"
  },
  {
    "key": "ctrl+oem_1 ctrl+c",
    "command": "-testing.debugAtCursor",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+oem_1 ctrl+f",
    "command": "-testing.debugCurrentFile",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+oem_1 ctrl+m",
    "command": "-testing.openOutputPeek"
  },
  {
    "key": "ctrl+oem_1 ctrl+r",
    "command": "-testing.refreshTests",
    "when": "testing.canRefresh"
  },
  {
    "key": "ctrl+oem_1 e",
    "command": "-testing.reRunFailTests"
  },
  {
    "key": "ctrl+oem_1 l",
    "command": "-testing.reRunLastRun"
  },
  {
    "key": "ctrl+oem_1 ctrl+shift+l",
    "command": "-testing.coverageLastRun"
  },
  {
    "key": "ctrl+oem_1 a",
    "command": "-testing.runAll"
  },
  {
    "key": "ctrl+oem_1 ctrl+shift+a",
    "command": "-testing.coverageAll"
  },
  {
    "key": "ctrl+oem_1 c",
    "command": "-testing.runAtCursor",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+oem_1 ctrl+shift+c",
    "command": "-testing.coverageAtCursor",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+oem_1 f",
    "command": "-testing.runCurrentFile",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+oem_1 ctrl+shift+f",
    "command": "-testing.coverageCurrentFile",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+oem_1 ctrl+o",
    "command": "-testing.showMostRecentOutput",
    "when": "testing.hasAnyResults"
  },
  {
    "key": "ctrl+oem_1 ctrl+shift+i",
    "command": "-testing.toggleInlineCoverage"
  },
  {
    "key": "ctrl+oem_1 ctrl+i",
    "command": "-testing.toggleInlineTestOutput"
  },
  {
    "key": "ctrl+oem_1 ctrl+x",
    "command": "-testing.cancelRun"
  },
  {
    "key": "ctrl+oem_1",
    "command": "workbench.action.toggleEditorWidths"
  },
  // Ctrl+! toggles sidebar visibility
  {
    "key": "ctrl+oem_8",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "ctrl+b",
    "command": "-workbench.action.toggleSidebarVisibility"
  },
  // Ctrl+Shift+! toggles secondary sidebar visibility
  {
    "key": "ctrl+shift+oem_8",
    "command": "workbench.action.toggleAuxiliaryBar"
  },
  {
    "key": "ctrl+alt+b",
    "command": "-workbench.action.toggleAuxiliaryBar"
  },
  // Ctrl+M chords are for markdown snippets
  {
    "key": "ctrl+m",
    "command": "-editor.action.toggleTabFocusMode"
  },
  {
    "key": "ctrl+m c",
    "command": "editor.action.insertSnippet",
    "args": {
      "name": "md.checkbox"
    }
  },
]
